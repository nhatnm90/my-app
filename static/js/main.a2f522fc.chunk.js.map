{"version":3,"sources":["components/todoList/Title.js","components/todoList/Control/Search.js","components/todoList/Control/Sort.js","components/todoList/Control/Control.js","components/todoList/Form.js","components/todoList/TaskItem.js","components/todoList/TaskList.js","TodoList.js","serviceWorker.js","index.js"],"names":["Title","className","Component","Search","props","console","log","state","inputSearch","handleClick","bind","handleClear","handleChange","this","onClickSearch","setState","event","target","value","onChange","type","placeholder","onClick","Sort","sortName","sortDir","handleSort","onClickSort","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","href","role","toLocaleUpperCase","toUpperCase","Control","handleToogle","genetateAddButton","isShowAddForm","button","uuidv4","require","Form","name","level","handleCancel","handleInputChange","handleSubmit","get","isEmpty","nextProps","itemSelected","onAddTask","parseInt","onEditTask","preventDefault","onClickCancel","onSubmit","required","TaskItem","val","index","scope","generateLevel","onEditItem","onDeleteItem","TaskList","itemEle","items","map","row","item","Object","assign","editItem","deleteItem","key","TodoList","handleToogleAddForm","handleSearch","handleDeleteItem","handleAddTask","handleBindingSelectedItem","handleEditTask","_","remove","i","localStorage","setItem","JSON","stringify","task","push","dataFromLocalStorage","parse","getItem","addForm","length","filter","includes","toLower","orderBy","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a2f522fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"page-header\">\r\n                <h2>Beauty Queen Todo List</h2>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        console.log('constructor');\r\n\r\n        this.state = {\r\n            inputSearch: ''\r\n        };\r\n\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    } \r\n\r\n    handleClick() {\r\n        this.props.onClickSearch(this.state.inputSearch);\r\n    }\r\n\r\n    handleClear() {\r\n        this.setState({ inputSearch: '' });\r\n        this.props.onClickSearch('');\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ inputSearch: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-4 col-sm-4 col-md-4 col-lg-4\">\r\n              <div className=\"input-group\">\r\n                <input value={this.state.inputSearch} onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"...\" />\r\n                <div className=\"input-group-btn\">\r\n                  <button onClick={this.handleClick} className=\"btn btn-success\" type=\"button\">Search</button>\r\n                  <button onClick={this.handleClear} className=\"btn btn-warning\" type=\"button\">Clear</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\n\r\nclass Sort extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sortName: 'level',\r\n            sortDir: 'desc'\r\n        };\r\n        this.handleSort = this.handleSort.bind(this);\r\n    } \r\n\r\n    handleSort(sortName, sortDir){\r\n        this.setState({\r\n            sortName, sortDir\r\n        });\r\n        this.props.onClickSort(sortName, sortDir);\r\n    }\r\n\r\n    render() {\r\n        const { sortName, sortDir } = this.state;\r\n        return (\r\n          <div className=\"col-xs-3 col-sm-3 col-md-3 col-lg-3\">\r\n            <div className=\"dropdown\">\r\n              <button className=\"btn btn-default dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                Sort by <span className=\"caret\" />\r\n              </button>\r\n              <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('name', 'asc')}>Name Asc</a></li>\r\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('name', 'desc')}>Name Desc</a></li>\r\n                <hr/>\r\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('level', 'asc')}>Level Asc</a></li>\r\n                <li><a href='/#' role=\"button\" onClick={() => this.handleSort('level', 'desc')}>Level Desc</a></li>\r\n              </ul>\r\n              <span> </span>\r\n              <span id=\"spSort\" className=\"label label-success label-medium\">{`${sortName.toLocaleUpperCase()} - ${sortDir.toUpperCase()}` }</span>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sort;","import React, { Component } from 'react';\r\nimport Search from './Search'\r\nimport Sort from './Sort'\r\n\r\nclass Control extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleToogle = this.handleToogle.bind(this);\r\n        this.genetateAddButton = this.genetateAddButton.bind(this);\r\n    }\r\n\r\n    handleToogle() {\r\n        this.props.onClick();\r\n    }\r\n\r\n    genetateAddButton() {\r\n        if (this.props.isShowAddForm) {\r\n            return (<button type=\"button\" className=\"btn btn-default btn-block\" onClick={this.handleToogle}>Cancel</button>);\r\n        }\r\n        return (<button type=\"button\" className=\"btn btn-info btn-block\" onClick={this.handleToogle}>Add new task</button>);\t\r\n    }\r\n\r\n    render() {\r\n        let button = this.genetateAddButton();\r\n        return (\r\n            <div className=\"row\">\r\n              <Search onClickSearch={this.props.onClickSearch} />\r\n                {/* SORT AREA */}\t\r\n              <Sort onClickSort={this.props.onClickSort} />\r\n                {/* ADD NEW TASK BUTTON */}\r\n                <div className=\"col-xs-5 col-sm-5 col-md-5 col-lg-5\">\t\t\r\n                    { button }\t\r\n                    {/* {this.showControllButton} */}\r\n                    {/* <button type=\"button\" className=\"btn btn-info btn-block\" onClick={this.props.onClick}>Add new task</button>\t\t\t\t */}\r\n                </div>\r\n              </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;","import React, { Component } from 'react';\r\nimport { get, isEmpty, parseInt } from 'lodash';\r\nconst uuidv4 = require('uuid/v4')\r\n\r\nclass Form extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            level: 0\r\n        };\r\n\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        const id = get(this.props, 'itemSelected.id', '');\r\n        if (!isEmpty(id)) {\r\n            const { name, level } = get(this.props, 'itemSelected', {});\r\n            this.setState({\r\n                id, name, level\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps !== null) {\r\n            const { itemSelected: { id, name, level } } = nextProps;\r\n            this.setState({\r\n                id, name, level\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        const { id, name, level } = this.state;\r\n        if (isEmpty(id)) {\r\n            this.props.onAddTask({name, level: parseInt(level), id: uuidv4()});\r\n        } else {\r\n            this.props.onEditTask({name, level: parseInt(level), id});\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleCancel() {\r\n        this.setState({\r\n            id: '',\r\n            name: '',\r\n            level: 0\r\n        });\r\n        this.props.onClickCancel();\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const { target: { name, value } } = event;\r\n        // const value = target.name === 'isGoing' ? target.checked : target.value;\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { name, level } = this.state;\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-offset-7 col-md-5\">\t\t\t\t\t\r\n                  <form  onSubmit={this.handleSubmit} className=\"form-inline\">\r\n                    <div className=\"form-group\">\r\n                      {/* <label className=\"sr-only\" htmlFor>label</label> */}\r\n                      <input name=\"name\" type=\"text\" className=\"form-control\" placeholder=\"Task name\" value={name} onChange={this.handleInputChange} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <select  placeholder=\"Task priority\" name=\"level\" value={parseInt(level)} id=\"input\" className=\"form-control\" required=\"required\" onChange={this.handleInputChange}>\r\n                            <option value={0}>Low</option>\r\n                            <option value={1}>Medium</option>\r\n                            <option value={2}>High</option>\r\n                        </select>\r\n                      {/* <select name=\"level\" id=\"input\" className=\"form-control\" required=\"required\" onChange={this.handleInputChange}>\r\n                        <option selected={parseInt(displayLevel) === 0 } value={0}>Low</option>\r\n                        <option selected={parseInt(displayLevel) === 1 } value={1}>Medium</option>\r\n                        <option selected={parseInt(displayLevel) === 2 } value={2}>High</option>\r\n                      </select> */}\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    <button onClick={this.handleCancel} type=\"button\" className=\"btn btn-danger\">Cancel</button>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass TaskItem extends Component {\r\n\r\n    generateLevel(level){\r\n        if ((level) === 0) {\r\n            return (<span className=\"label label-info\">Low</span>);\r\n        } else if (level === 1) {\r\n            return (<span className=\"label label-default\">Medium</span>);\r\n        } else {\r\n            return (<span className=\"label label-danger\">High</span>);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { val: { index, name, level, id } } = this.props;\r\n        return (\r\n            <tr>\r\n                <th scope=\"row\">{index + 1}</th>    \r\n                <td>{name}</td>\r\n                <td>{this.generateLevel(level)}</td>\r\n                <td>\r\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={() => this.props.onEditItem({id, name, level})}>Edit</button>\r\n                    <span> </span>\r\n                    <button type=\"button\" className=\"btn btn-success\" onClick={() => this.props.onDeleteItem(id)}>Mark as done</button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskItem;","import React, { Component } from 'react';\r\nimport TaskRow from './TaskItem';\r\n\r\nclass TaskList extends Component {\r\n\r\n    render() {\r\n        const itemEle = this.props.items.map((row, index) => {\r\n            let item = Object.assign({},{ ...row, index });\r\n            return <TaskRow onEditItem={this.props.editItem} onDeleteItem={this.props.deleteItem} key={index} val={item} />\r\n        });\r\n\r\n        return (\r\n            <div className=\"panel panel-success\">\r\n                <div className=\"panel-heading\">List task</div>\r\n                <table className=\"table table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Task</th>\r\n                            <th scope=\"col\">Priority</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {itemEle}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport Title from './components/todoList/Title'\r\nimport Control from './components/todoList/Control/Control'\r\nimport Form from './components/todoList/Form'\r\nimport TaskList from './components/todoList/TaskList'\r\n// import mockItems from './mockData/tasks'\r\n\r\nclass TodoList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            items: [],\r\n            inputSearch: '',\r\n            isShowAddForm: false,\r\n            sortName: 'level',\r\n            sortDir: 'desc',\r\n            itemSelected: null\r\n        };\r\n\r\n        this.handleToogleAddForm = this.handleToogleAddForm.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleSort = this.handleSort.bind(this);\r\n        this.handleDeleteItem = this.handleDeleteItem.bind(this);\r\n        this.handleAddTask = this.handleAddTask.bind(this);\r\n        this.handleBindingSelectedItem = this.handleBindingSelectedItem.bind(this);\r\n        this.handleEditTask = this.handleEditTask.bind(this);\r\n    }\r\n\r\n    handleToogleAddForm() {\r\n        this.setState({\r\n            itemSelected: null,\r\n            isShowAddForm: !this.state.isShowAddForm\r\n        });\r\n    }\r\n\r\n    handleSearch(inputSearch) {\r\n        this.setState({ inputSearch });\r\n    }\r\n\r\n    handleSort(sortName, sortDir) {\r\n        this.setState({ sortName, sortDir });\r\n    }\r\n\r\n    handleDeleteItem(id) {\r\n        let { items } = this.state;\r\n        _.remove(items, i => i.id === id);\r\n        this.setState({ items });\r\n\r\n        localStorage.setItem('items', JSON.stringify(items));\r\n    }\r\n\r\n    handleAddTask(task) {\r\n        let { items } = this.state;\r\n        items.push(task);\r\n        this.setState({ items, isShowAddForm: false });\r\n\r\n        localStorage.setItem('items', JSON.stringify(items));\r\n    }\r\n\r\n    handleEditTask(task) {\r\n        let { items } = this.state;\r\n        _.remove(items, i => i.id === task.id);\r\n        items.push(task);\r\n        this.setState({ items, isShowAddForm: false });\r\n\r\n        localStorage.setItem('items', JSON.stringify(items));\r\n    }\r\n\r\n    handleBindingSelectedItem(itemSelected) {\r\n        this.setState({ itemSelected, isShowAddForm: true });\r\n    }\r\n\r\n    componentWillMount() {\r\n        const dataFromLocalStorage = JSON.parse(localStorage.getItem('items'));\r\n        this.setState({ items: dataFromLocalStorage ?? [] });\r\n        // this.setState({ items: mockItems });\r\n        // localStorage.setItem('items', JSON.stringify(this.state.items));\r\n    }\r\n\r\n    componentDidMount() {\r\n        // localStorage.setItem('items', JSON.stringify(this.state.items));\r\n    }\r\n\r\n    render() {\r\n        let addForm = null;\r\n        let { isShowAddForm, items, sortDir, sortName, inputSearch, itemSelected } = this.state;\r\n        if (isShowAddForm) {\r\n            addForm = <Form itemSelected={itemSelected} onAddTask={this.handleAddTask} onEditTask={this.handleEditTask} onClickCancel={this.handleToogleAddForm} />;\r\n        }\r\n\r\n        items = inputSearch.length > 0 ? items.filter(i => _.includes(_.toLower(i.name), _.toLower(inputSearch))) : items;\r\n        items = _.orderBy(items,[sortName],[sortDir]);\r\n\r\n        return (\r\n            <div>\r\n                <Title />\r\n                <Control\r\n                    onClick = {this.handleToogleAddForm}\r\n                    isShowAddForm = {isShowAddForm}\r\n                    onClickSearch = {this.handleSearch}\r\n                    onClickSort = {this.handleSort}\r\n                />\r\n                { addForm }\r\n                <TaskList editItem={this.handleBindingSelectedItem} deleteItem={this.handleDeleteItem} items={items}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import Introduce from './Introduce';\r\nimport TodoList from './TodoList';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <TodoList />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}